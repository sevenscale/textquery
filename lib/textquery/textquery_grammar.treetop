# Encoding: UTF-8

grammar TextQueryGrammar

  rule expression
     alternates
  end

  rule alternates
    c1:conjunction space or space c2:alternates {
      def eval(text, opt)
        c1.eval(text, opt) || c2.eval(text, opt)
      end

      def accept(&block)
        block.call(:or, c1.accept(&block), c2.accept(&block), &block)
      end
    }
    /
    conjunction
  end

  rule conjunction
    !or op1:term space and space op2:conjunction {
      def eval(text, opt)
        op1.eval(text, opt) && op2.eval(text, opt)
      end

      def accept(&block)
        block.call(:and, op1.accept(&block), op2.accept(&block), &block)
      end
    }
    /
    !or op1:term [\s]+ op2:conjunction {
      def eval(text, opt)
        op1.eval(text, opt) && op2.eval(text, opt)
      end

      def accept(&block)
        block.call(:implicit, op1.accept(&block), op2.accept(&block))
      end
    }
    /
    !or op1:term {
      def eval(text, opt)
        op1.eval(text, opt)
      end

      def accept(&block)
        op1.accept(&block)
      end
    }
  end

  rule unary
    ('-' / not) {
      def eval(a)
        not a
      end

      def accept(a, &block)
        block.call(:not, a)
      end
    }
  end

  rule or
    'OR' ![A-Za-z0-9]
  end

  rule and
    'AND' ![A-Za-z0-9]
  end

  rule not
    'NOT' ![A-Za-z0-9]
  end

  rule space
    [\s]*
  end

  rule word
    [^\s\(\)]+ <WordMatch>
  end

  rule single_quote
    [']
  end

  rule single_quote_words
    [^']+ <WordMatch>
  end

  rule double_quote
    ["]
  end

  rule double_quote_words
    [^"]+ <WordMatch>
  end

  rule forward_slash
    [/]
  end

  rule regex_words
    [^/]+ <WordMatch>
  end

  rule alpha
    [[:alpha:]]
  end

  rule alphanumeric
    alpha / [0-9]
  end

  rule attribute
    alpha alphanumeric*
  end

  rule term
    attribute attribute_delimiter value
    # If you wish to restrict the allowed attributes, add a sempred here:
    # &{|s| is_valid_attribute(s[0].text_value) }
    {
      def eval(text, opt)
        value.eval(text, opt)
      end
      def accept(&block)
        block.call(:attribute, attribute.text_value, value.accept(&block))
      end
    }
    /
    value
  end

  rule value
    '(' space expression space ')' {
       def eval(text, opt)
         expression.eval(text, opt)
       end

       def accept(&block)
         expression.accept(&block)
       end
    }
    /
    operator:unary space term {
      def eval(text, opt)
        operator.eval(term.eval(text, opt))
      end

      def accept(&block)
        operator.accept(term.accept(&block), &block)
      end
    }
    /
    double_quote double_quote_words double_quote {
      def eval(text, opt)
        double_quote_words.eval(text, opt)
      end

      def accept(&block)
        double_quote_words.accept(&block)
      end
    }
    /
    single_quote single_quote_words single_quote {
      def eval(text, opt)
        single_quote_words.eval(text, opt)
      end

      def accept(&block)
        single_quote_words.accept(&block)
      end
    }
    /
    forward_slash regex_words forward_slash {
      def eval(text, opt)
        # not so much
        # regex_words.eval(text, opt)
      end

      def accept(&block)
        block.call(:regex_value, regex_words.text_value)
      end
    }
    /
    !(or / and) word {
      def eval(text, opt)
        word.eval(text, opt)
      end

      def accept(&block)
        word.accept(&block)
      end
    }
  end
end
